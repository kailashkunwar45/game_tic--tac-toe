import math

def print_board(board):
    print("---------")
    for row in board:
        print("| " + " ".join(row) + " |")
    print("---------")

def check_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if all(s == player for s in row):
            return True
    for col in range(3):
        if all(row[col] == player for row in board):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def check_draw(board):
    return all(cell != ' ' for row in board for cell in row)

def player_move(board, player):
    while True:
        try:
            row, col = map(int, input(f"Player {player}, enter your move (row and column: 1-3): ").split())
            if board[row-1][col-1] == ' ':
                board[row-1][col-1] = player
                break
            else:
                print("Cell already taken. Try again.")
        except (ValueError, IndexError):
            print("Invalid input. Enter row and column numbers between 1 and 3.")

def minimax(board, depth, is_maximizing):
    # Base cases for recursion
    if check_winner(board, 'O'):
        return 1  # Computer (O) wins
    if check_winner(board, 'X'):
        return -1  # Player (X) wins
    if check_draw(board):
        return 0  # Draw

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    best_score = min(score, best_score)
        return best_score

def computer_move(board):
    best_score = -math.inf
    best_move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                score = minimax(board, 0, False)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    board[best_move[0]][best_move[1]] = 'O'
    print(f"Computer played at {best_move[0]+1}, {best_move[1]+1}")

def play_game():
    while True:
        board = [[' ' for _ in range(3)] for _ in range(3)]
        print("Choose mode:\n1. Two Players\n2. Play with Computer")
        mode = input("Enter choice (1 or 2): ")
        current_player = 'X'

        while True:
            print_board(board)
            if current_player == 'X' or mode == '1':
                player_move(board, current_player)
            else:
                computer_move(board)
            
            if check_winner(board, current_player):
                print_board(board)
                print(f"Player {current_player} wins!")
                break
            elif check_draw(board):
                print_board(board)
                print("It's a draw!")
                break
            
            current_player = 'O' if current_player == 'X' else 'X'

        # Ask if the players want to play again
        play_again = input("Do you want to play again? (yes or no): ").strip().lower()
        if play_again != 'yes':
            print("Thanks for playing!")
            break
play_game()
 